#+STARTUP:showall

#+TITLE: JAVA SECURITY

* 基础安全架构
  java api覆盖了主要的安全领域，包括cryptography(加密)，public key infrastructure(PKI,公开密钥)，authentication(认证)，secure communication(安全连接)和access control(访问控制)。

  遵循的设计原则：
  * 实现对立性 :: 程序不必自己实现安全代码，可以直接使用提供者(Provider)的服务，服务通过标准接口插入到java平台
  * 互操作性 :: 跨应用程序访问Provider, 程序不绑定特定的提供者，提供者也没有绑定特定的程序
  * 算法可扩展 :: 支持自定义Provider

* Security Provider
  ~java.security.Provider~ 是java平台的安全封装，提供了Provider的名称和实现的安全服务。当多个Provders同时配置时，并依序排列，服务请求时，最高优先级的将被选择。
  Privoder配置路劲：JRE_HOME/lib/security/java.security

* Cryptography(JCA)
   
   engine class负责定位Provider的SPI(Service Provider Interface抽象类)的实现。
对于每一个engine class都有一个SPI抽象类，抽象类名称为engine class的名称加“SPI”，
Provider必须继承该抽象类。

   Providers: [[https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html][SunProviders]]
** JCA 概念
   
*** engine class:
   + SecureRandom :: 生成随机数和伪随机数
   + MessageDigest :: 计算HASH
   + Signature :: 使用密钥初始化，签名数据和验证数字签名
   + Cipher :: 使用密钥初始化， 加解密数据
   + Message Authentication Codes(MAC) :: 同MessageDigest,但需要密钥
   + KeyFactory :: 将现有不透明Key转换为规范密钥。
   + SecreKeyFactory :: 将现有不透明SecreKey转换为规范密钥
   + KeyPairGenerator :: 生成公钥和私钥
   + KeyGenerator :: 生成新的密钥
   + KeyAgreement :: 从两个或多个部分协商并建立一个特殊的密钥，用于特定的加密操作
   + AlgorithmParameters :: 保存特定算法的参数，包括参数的编码和解码
   + AlgorithmParameterGenerator :: 生成一个AlgorithmParameters集合
   + KeyStore :: 创建和管理Keystore
   + CertificateFactory :: 创建公钥证书和证书销毁列表（CRL）
   + CertPathBuilder :: 建立证书链（证明路径）
   + CertPathValidator :: 验证证书链
   + CertStore :: 从库里获取证书和CRL 
*** Provider class 
    Provider是指实现JDK安全API加密功能子集的具体实现软件包。Provider class是这些包的接口，提供名称，版本号，和其他信息。
**** Provider class 安装路径
    + java classpath
    + 扩展文件夹
      * Solaris, Linux, or Mac OS X: <java-home>/lib/ext
      * Windows: <java-home>\lib\ext
**** 注册
     * Solaris, Linux, or Mac OS X: <java-home>/lib/security/java.security
     * Windows: <java-home>\lib\security\java.security
*** Security class
    Security管理Providers和安全相关的配置。
#+BEGIN_EXAMPLE

               |SecureRandom| nextInt/nextBytes   
    |seed|---->|(SHA1RPNG)  |------------------>|data| 
#+END_EXAMPLE
**** 查询Providers
     + static Provider[] getProviders()
     + static Provider getProvider(String providerName)
**** 增加Providers
     + static int addProvider(Provider provider)
     + static int insertProviderAt(Provider provider, int position)
**** 删除Providers
     + static void removeProvider(String name)
**** Security Properties
     + static String getProperty(String key)
     + static void setProperty(String key, javascript void 0String datum)
*** SecureRandom class
    安全的随机数生成器，用于产生加密key, 参数。
**** 创建SecureRandom
     + new SecureRandom()
     + SecureRandom.getInstance()
     + getInstanceStrong() :: java.security.Security中的securerandom.strongAlgorithms定义的实现
**** 方法
     + synchronized public void setSeed(byte[] seed)
     + public void setSeed(long seed)
     + synchronized public void nextBytes(byte[] bytes)
     + byte[] generateSeed(int numBytes)
*** MessageDigest class
          update()  |MessageDigest|  digest()
    |Data|--------->|  (md5)      |------------|Digest/Hash|
*** Signature Class
#+BEGIN_EXAMPLE

                        |Private key/Public key|
                                   |
                         |----------------------------------------|
           update()|  Signature |sign() |signature|verify()|  Signature |
     |Data|------->|(MD5withRSA)|------>|  Bytes  |--------|(MD5withRSA)|-->Yes/No
        |          |    sign    |                       |  |    verify  |           
        |______________________________update()_________|
#+END_EXAMPLE

签名算法用任意大小的输入和私钥产生称为签名的相对短的（或固定大小）的字节字符串。，
**** Signature 对象状态
     + UNINITIALIED
     + SIGN
     + VERIFY
当对象创建时，Signature对象是UNINITIALIED,Signature类的两个初始函数initSign和initVerify,将对象转换为SING和VERIFY 。

*** Cipher class
    提供加密和解密功能。
#+BEGIN_EXAMPLE
                                    |Secure Key|
                                         |
                 |--------------------------------------------------|
            update    |Cipher|-->|AlgorithmParameters|----------------->|Cipher|
            doFinal() | AES  |                          update/doFinal  | AES  |
|plaintext|---------->|Encrpt|--->ciphertext--------------------------->|Decrpt|-->plaintext
#+END_EXAMPLE
**** 对称、非对称加密 
     加密有两种主要的类型：symmetric(secure key)和asymmetric(public key cryptography)。
非对称加密一般比对称慢，不适合加密大量数据，非对称可以用来加密secure key.
**** stream vs block
     块加密一次处理一块数据，一般为bytes数组，最后一块数据不满需要填充。在解密时需要将填充字节去掉。填充可以由程序处理也可以
在初始化Cipher时指定填充类型如“PKCS5PADDING”.流加密一次处理一个字节或比特，不需要填充。
小块加密，相同的文本块的密文也是相同的。如果有相同的加密块，增加了被破译的风险。为了增加文本的复杂度，feedback mode使用前块的输出改变
当前输入块。第一个块需要一个初始值，也被称为初始向量（IV）。
CBC (Cipher Block Chaining), CFB (Cipher Feedback Mode),  OFB (Output Feedback Mode). ECB (Electronic Cookbook Mode) is a mode with no feedback.
AES和RSA允许KEU是不定长的，DES和3DES是定长的。
大多数算法使用二进制key,因为不容易记忆。使用“Password based Encrption”PBE产生强二进制KEY。
新型的加密模式例如Authenticated Encrption with Associated Data(AEAD)加密数据同时验证结果信息。
** CSP -- Cryptographic Service Provider
   java.security.Provider是所有安全服务提供者的基类。
** Message digest algorithms(消息摘要算法, hash)
   MD5, SHA-1, SHA-256
** Digital signature algorithms(电子签名算法)
   RSA, DSA, ECDSA
** Symmetric bulk encryption(对称块加密)
   DES,AES，DESede, Blowfish, IDEA
** Symmetric stream encryption(对称流加密)
   ARCFOUR(RC4)
** Asymmetric encryption（非对称加密）

** Password-based encryption(PBE 密码加密)

** Elliptic Curve Cryptography(ECC 椭圆曲线加密)

** Key agreement algorithms（密钥协商算法）
Diffie-Hellman ECDH 
** Key generators

** Message Authentication Codes(MACs 消息认证码)

** （Pseudo-）random number generators

* Public Key Infrastructure (PKI)
  PKI是基于公钥加密的信息安全交换框架,数字证书绑定，提供多种方式鉴定证书真伪。
包含密钥，证书，公钥加密和可信认证中心。
java平台API支持X.509数字证书和证书吊销列表(CRL)

* 密钥与证书存储 
  + java.security.KeyStore :: 保存密钥和可信证书
  + java.security.CertStore :: 保存不可信证书和CRL
 
  KeyStore和CertStore实现类型：
  * PKCS11和PKCS12
  * JKS(文件类型)
  * DKS(Domain key Store)
  * LDAP 证书存储

    java内置了一个JKS，*cacerts*包含许多可信CA
    SunPKCS11 provider包含了PKCS11 KeyStore实现，这意味安全硬件中的密钥和证书可通过keystore API
  读取和使用。
       
* 安全连接

** SSL/TLS(Java Secure Socket Extension,JSSE)
   支持的协议：
   + SSLv3
   + TLSv1
   + TLSv1.1
   + TLSv1.2

** SASL(Simple Authentication and Security Layer )
   The Java platform includes a built-in provider that implements the following SASL mechanisms:

   + CRAM-MD5, DIGEST-MD5, EXTERNAL, GSSAPI, NTLM, and PLAIN client mechanisms
   + CRAM-MD5, DIGEST-MD5, GSSAPI, and NTLM server mechanisms

** GSS-API, Kerberos (Java Generic Security Services (JGSS))
